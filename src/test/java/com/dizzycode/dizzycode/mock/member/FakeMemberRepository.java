package com.dizzycode.dizzycode.mock.member;

import com.dizzycode.dizzycode.member.domain.Member;
import com.dizzycode.dizzycode.member.domain.Role;
import com.dizzycode.dizzycode.member.service.port.MemberRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeMemberRepository implements MemberRepository {

    private Long autoGeneratedId = 0L;
    private List<Member> data = new ArrayList<>();

    @Override
    public Member save(Member member) {
        Member newMember = Member.builder()
                .id(++autoGeneratedId)
                .email(member.getEmail())
                .username(member.getUsername())
                .password(member.getPassword())
                .role(Role.ROLE_USER)
                .build();
        data.add(newMember);
        return newMember;
    }

    @Override
    public Optional<Member> findByEmail(String email) {
        return data.stream().filter(member -> member.getEmail().equals(email)).findAny();
    }

    @Override
    public Optional<Member> findByUsername(String username) {
        return data.stream().filter(member -> member.getUsername().equals(username)).findAny();
    }

    @Override
    public Boolean existsByEmailOrUsername(String email, String username) {
        return data.stream().anyMatch(member -> member.getEmail().equals(email) || member.getUsername().equals(username));
    }

    @Override
    public Optional<Member> findById(Long id) {
        return data.stream().filter(member -> member.getId().equals(id)).findAny();
    }
}
